weighted_stats(c(2,3,4), c(1,1,2))
install.packages("devtools")
library(ab1202ay2021)
weighted_stats(c(2,3,4), c(1,1,2))
install.packages("roxygen2")
devtools::document()
usethis::use_testthat()
getwd()
# 2 c
summary(dropsize)
library(ab1202ay2021)
# 2
dropsize = c(2.1,2.2,2.2,2.3,2.3,2.4,2.5,2.5,2.5,2.8,2.9,2.9,2.9,3.0,3.1,3.1,3.2,3.3,3.3,3.3,3.4,3.5,3.6,3.6,3.7,3.7,4.0,4.2,4.5,4.9,5.1,5.2,5.3,5.7,6.0,6.1,6.7,7.1,7.8,7.9,8.9)
# 2 a
hist(dropsize)
# The histogram shows that there are a lot of droplets that are between 2-4 units.
# 2 b
stem(dropsize)
# 2 c
summary(dropsize)
# 2 c
IQR(dropsize)
# 2 d
box(dropsize)
# 2 d
boxplot(dropsize)
stem(dropsize)
?boxplot
# 2 d
boxplot(dropsize)
weighted_stats(x,w)
x = c(1,3,5,7,9)
w = c(10,25,20,40,5)
weighted_stats(x,w)
summary(dropsize)
library(licenses)
library(license)
library(usethis)
use_gpl3_license()
library(markdown)
library(pandoc)
usethis::use_vignette("my-vignette")
library(rmarkdown)
install.packages(rmarkdown)
install.packages("rmarkdown")
usethis::use_vignette("my-vignette")
browseVignettes()
?browseVignettes
weighted_stats
library(ab1202ay2021)
weighted_stats(c(1,2,3,4),c(1))
#' @param x vector of values, e.g. \code{c(2,3,4)}
#' @param p vector of probabilities/frequencies, e.g. \code{c(1,1,2)} or \code{c(0.25,0.25,0.5)}
#' @return \itemize{
#' \item Expectation/Mean
#' \item Population Variance and Standard Deviation
#' }
#' @seealso \code{\link{key_stats}} for calculating x with a uniform distribution.
#' @examples
#' weighted_stats(c(2,3,4), c(1,1,2))
#' weighted_stats(c(2,3,4), c(0.25,0.25,0.5))
weighted_stats = function(x,p)
{
if(length(x)!=length(p)){
return("Vector lengths do not match up!")
} # checks that there is a corresponding probability/distribution
if(sum(p)!=1){
p = p / sum(p)
} # expresses frequencies as probabilities
POP_SIZE = length(x)
EXMEAN = weighted.mean(x,p)
POP_VAR = sum(p * (x - EXMEAN)^2)
cat("Number of unique data points: ", POP_SIZE, "\n")
cat("Expectation/Mean   : ", EXMEAN, "\n")
cat("Population Variance: ", POP_VAR, "\n")
cat("Standard Deviation : ", POP_VAR**0.5, "\n")
}
#' @param x vector of values, e.g. \code{c(2,3,4)}
#' @param p vector of probabilities/frequencies, e.g. \code{c(1,1,2)} or \code{c(0.25,0.25,0.5)}
#' @return \itemize{
#' \item Expectation/Mean
#' \item Population Variance and Standard Deviation
#' }
#' @seealso \code{\link{key_stats}} for calculating x with a uniform distribution.
#' @examples
#' weighted_stats(c(2,3,4), c(1,1,2))
#' weighted_stats(c(2,3,4), c(0.25,0.25,0.5))
weighted_stats = function(x,p)
{
if(length(x)!=length(p)){
return("Vector lengths do not match up!")
} # checks that there is a corresponding probability/distribution
if(sum(p)!=1){
p = p / sum(p)
} # expresses frequencies as probabilities
POP_SIZE = length(x)
EXMEAN = weighted.mean(x,p)
POP_VAR = sum(p * (x - EXMEAN)^2)
cat("Number of unique data points: ", POP_SIZE, "\n")
cat("Expectation/Mean   : ", EXMEAN, "\n")
cat("Population Variance: ", POP_VAR, "\n")
cat("Standard Deviation : ", POP_VAR**0.5, "\n")
}
devtools::document()
rm(list = c("weighted_stats"))
devtools::document()
library(ab1202ay2021)
statistics = function(x,p=NULL)
{
if (p == NULL)
{
key_stats(x)
}
else
{
weighted_stats(x,p)
}
}
statistics(c(2,3,4), c(0.25,0.25,0.5))
statistics = function(x,p=NA)
{
if (p == NA)
{
key_stats(x)
}
else
{
weighted_stats(x,p)
}
}
statistics(c(2,3,4), c(0.25,0.25,0.5))
statistics(c(2,3,4), c(0.25,0.25,0.5))
statistics = function(x,p=0)
{
if (p == 0)
{
key_stats(x)
}
else
{
weighted_stats(x,p)
}
}
statistics(c(2,3,4), c(0.25,0.25,0.5))
sd_pop(c(1,2,3,4))
var_pop(c(1,2,3,4))
sqrt(0.9682458 )
devtools::document()
sd_pop(c(1,2,3,4))
summary(c(1,2,3,4))
?hypo
library(ab1202ay2021)
?hypo
?hypo()
??hypo
devtools::document()
?hypo
hypo(one_tail = TRUE, unknown_pop_sd = TRUE, x_bar=30, mu=32, sd=5, sample_size=30)
hypo(one_tail = TRUE, unknown_pop_sd = FALSE, x_bar=47, mu=45, sd=8.5, sample_size=36)
hypo(unknown_pop_sd = FALSE,47,45,8.5,36)
library(ab1202ay2021)
hypo(TRUE,FALSE,47,45,8.5,36)
rej(0.07900963,5)
rej(0.07900963,0.05)
rej(0.07900963,0.1)
rej(0.07900963,0.10)
rej(0.07900963,1)
devtools::document()
devtools::document()
hypo(one_tail = TRUE, unknown_pop_sd = FALSE, x_bar=47, mu=45, sd=8.5, sample_size=36)
hypo(TRUE,FALSE,47,45,8.5,36)
hypo(one_tail=TRUE, unknown_pop_sd=FALSE, x_bar=47, mu=45, sd=8.5, sample_size=36)
ci_size(90,22,106,15,FALSE)
pwd
pwd()
file.exists("~/.ssh/id_rsa.pub")
cd
